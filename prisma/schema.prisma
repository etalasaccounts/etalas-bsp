// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  karyawan
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String
  emailVerified DateTime?
  image         String?
  role          Role         @default(karyawan)
  
  workspaceId   String?
  workspace     Workspace?   @relation(fields: [workspaceId], references: [id])
  
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[] @relation("AssignedConversations")
  notifications Notification[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id   String @id @default(cuid())
  name String

  users               User[]
  whatsappConnections WhatsAppConnection[]
  invitations         Invitation[]
  conversations       Conversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WhatsAppConnection {
  id          String  @id @default(cuid())
  name        String
  wabaId      String
  phoneNumber String
  accessToken String  @db.Text
  isActive    Boolean @default(true)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Conversation {
  id            String  @id @default(cuid())
  customerPhone String
  customerName  String?
  status        String  @default("open") // open, closed, pending
  
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  assignedToId  String?
  assignedTo    User?    @relation("AssignedConversations", fields: [assignedToId], references: [id])
  
  messages      Message[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([workspaceId, customerPhone])
}

model Message {
  id           String  @id @default(cuid())
  content      String  @db.Text
  fromCustomer Boolean
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
}

model Notification {
  id      String  @id @default(cuid())
  message String
  link    String?
  read    Boolean @default(false)
  
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}
